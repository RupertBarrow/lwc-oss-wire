{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/modules/data/reddit/reddit.js","webpack:///./src/modules/data/subRedditDataProvider/subRedditDataProvider.js","webpack:///./src/modules/ui/reddit/reddit.html","webpack:///./src/modules/ui/reddit/reddit.js"],"names":[],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAA;AAAoC;AACL;;AAE/B,gBAAgB,yDAAa,YAAY,KAAK,iDAAM,EAAE;AACtD;;;;;;;;;;;;;ACJA;AAAA;AAAO;AACP;AACA,8DAA8D,UAAU;AACxE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,E;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAgE;AACrB;AAC5B;AACf,SAAS,gEAAY;AACrB;AACA,kEAAQ;AACR;AACA,IAAI,gEAAY,4EAA4E,mEAAiB;AAC7G;AACA,KAAK;AACL,GAAG;AACH;AACA,IAAI,gEAAY,4EAA4E,mEAAiB;AAC7G;AACA,KAAK;AACL,GAAG;AACH,CAAC,E;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAA;AAAA;AAAgD;;AAET;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA,KAAK;AACL,GAAG;AACH;;AAEe,2HAAgB,MAAM,EAAC;AACtC;;AAEA,IAAI,kDAAoB;AACxB,gDAAgD,kDAAoB;AACpE;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAgE;AAC9B;AAC4B;AACvB;AACsB;;AAE7D,qBAAqB,oDAAgB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oCAAoC;AAC7D;AACA;AACA;AACA;;;AAGA;;AAEA,8DAAmB;AACnB;AACA;AACA,eAAe,kEAAmB;AAClC;AACA;AACA,OAAO;AACP,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;;AAEc,4HAAkB;AACjC,QAAQ,oDAAK;AACb,CAAC,CAAC,E","file":"app.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"lwc~main\",\"node_vendors~main\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { createElement } from \"lwc\";\nimport Reddit from \"ui/reddit\";\n\nconst element = createElement(\"ui-app\", { is: Reddit });\ndocument.querySelector(\"#main\").appendChild(element);\n","export const getSubReddit = async subreddit => {\n  subreddit = subreddit || \"worldnews\";\n  const resp = await (await fetch(`https://www.reddit.com/r/${subreddit}.json`, {\n    mode: \"cors\",\n    headers: {\n      Accept: \"application/json\"\n    }\n  })).json();\n  return resp.data.children.slice(0, 10).map(c => c.data);\n};","import { register, ValueChangedEvent } from \"@lwc/wire-service\";\nimport { getSubReddit } from \"data/reddit\";\nexport default function getSubRedditDetails(config) {\n  return getSubReddit(config.subRedditName);\n}\nregister(getSubRedditDetails, eventTarget => {\n  eventTarget.addEventListener(\"config\", config => {\n    getSubReddit(config && config.subRedditName).then(resp => eventTarget.dispatchEvent(new ValueChangedEvent({\n      data: resp\n    })));\n  });\n  eventTarget.addEventListener(\"connect\", config => {\n    getSubReddit(config && config.subRedditName).then(resp => eventTarget.dispatchEvent(new ValueChangedEvent({\n      data: resp\n    })));\n  });\n});","import _implicitStylesheets from \"./reddit.css\";\n\nimport { registerTemplate } from \"lwc\";\n\nfunction tmpl($api, $cmp, $slotset, $ctx) {\n  const {\n    t: api_text,\n    b: api_bind,\n    h: api_element,\n    d: api_dynamic,\n    k: api_key,\n    i: api_iterator,\n    f: api_flatten\n  } = $api;\n  const {\n    _m0\n  } = $ctx;\n  return api_flatten([api_text(\"Subreddit Name: \"), api_element(\"input\", {\n    props: {\n      \"value\": $cmp.subRedditName\n    },\n    key: 0,\n    on: {\n      \"change\": _m0 || ($ctx._m0 = api_bind($cmp.updateSubReddit))\n    }\n  }, []), $cmp.hasData ? api_iterator($cmp.subRedditData.data, function (post) {\n    return api_element(\"a\", {\n      attrs: {\n        \"target\": \"_blank\",\n        \"href\": post.url\n      },\n      key: api_key(2, post.url)\n    }, [api_element(\"h2\", {\n      key: api_key(1, post.title)\n    }, [api_dynamic(post.title)])]);\n  }) : []]);\n}\n\nexport default registerTemplate(tmpl);\ntmpl.stylesheets = [];\n\nif (_implicitStylesheets) {\n  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets)\n}\ntmpl.stylesheetTokens = {\n  hostAttribute: \"ui-reddit-_reddit-host\",\n  shadowAttribute: \"ui-reddit-_reddit\"\n};\n","import { registerDecorators as _registerDecorators } from \"lwc\";\nimport _tmpl from \"./reddit.html\";\nimport { registerComponent as _registerComponent } from \"lwc\";\nimport { LightningElement } from \"lwc\";\nimport getSubRedditDetails from \"data/subRedditDataProvider\";\n\nclass Reddit extends LightningElement {\n  constructor(...args) {\n    super(...args);\n    this.subRedditName = \"worldnews\";\n    this.subRedditData = void 0;\n  }\n\n  updateSubReddit(event) {\n    this.subRedditName = event.target.value;\n  }\n\n  get hasData() {\n    return this.subRedditData && this.subRedditData.data;\n  }\n  /**\n  connectedCallback() {\n    getSubRedditDetails({ subRedditName: this.subRedditName }).then(\n      (resp) => (this.subRedditData = resp)\n    );\n  }\n  **/\n\n\n}\n\n_registerDecorators(Reddit, {\n  wire: {\n    subRedditData: {\n      adapter: getSubRedditDetails,\n      params: {\n        subRedditName: \"subRedditName\"\n      },\n      static: {},\n      hasParams: true,\n      config: function ($cmp) {\n        return {\n          subRedditName: $cmp.subRedditName\n        };\n      }\n    }\n  },\n  fields: [\"subRedditName\"]\n})\n\nexport default _registerComponent(Reddit, {\n  tmpl: _tmpl\n});"],"sourceRoot":""}